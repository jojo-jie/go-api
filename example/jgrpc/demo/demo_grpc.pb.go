// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/v1/demo.proto

package demo

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GreeterService_Greet_FullMethodName        = "/proto.v1.GreeterService/Greet"
	GreeterService_SearchOrders_FullMethodName = "/proto.v1.GreeterService/SearchOrders"
	GreeterService_UpdateOrders_FullMethodName = "/proto.v1.GreeterService/updateOrders"
)

// GreeterServiceClient is the client API for GreeterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterServiceClient interface {
	Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error)
	SearchOrders(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GreeterService_SearchOrdersClient, error)
	UpdateOrders(ctx context.Context, opts ...grpc.CallOption) (GreeterService_UpdateOrdersClient, error)
}

type greeterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterServiceClient(cc grpc.ClientConnInterface) GreeterServiceClient {
	return &greeterServiceClient{cc}
}

func (c *greeterServiceClient) Greet(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetResponse, error) {
	out := new(GreetResponse)
	err := c.cc.Invoke(ctx, GreeterService_Greet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterServiceClient) SearchOrders(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (GreeterService_SearchOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[0], GreeterService_SearchOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceSearchOrdersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type GreeterService_SearchOrdersClient interface {
	Recv() (*Order, error)
	grpc.ClientStream
}

type greeterServiceSearchOrdersClient struct {
	grpc.ClientStream
}

func (x *greeterServiceSearchOrdersClient) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *greeterServiceClient) UpdateOrders(ctx context.Context, opts ...grpc.CallOption) (GreeterService_UpdateOrdersClient, error) {
	stream, err := c.cc.NewStream(ctx, &GreeterService_ServiceDesc.Streams[1], GreeterService_UpdateOrders_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &greeterServiceUpdateOrdersClient{stream}
	return x, nil
}

type GreeterService_UpdateOrdersClient interface {
	Send(*Order) error
	CloseAndRecv() (*wrapperspb.StringValue, error)
	grpc.ClientStream
}

type greeterServiceUpdateOrdersClient struct {
	grpc.ClientStream
}

func (x *greeterServiceUpdateOrdersClient) Send(m *Order) error {
	return x.ClientStream.SendMsg(m)
}

func (x *greeterServiceUpdateOrdersClient) CloseAndRecv() (*wrapperspb.StringValue, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrapperspb.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterServiceServer is the server API for GreeterService service.
// All implementations must embed UnimplementedGreeterServiceServer
// for forward compatibility
type GreeterServiceServer interface {
	Greet(context.Context, *GreetRequest) (*GreetResponse, error)
	SearchOrders(*wrapperspb.StringValue, GreeterService_SearchOrdersServer) error
	UpdateOrders(GreeterService_UpdateOrdersServer) error
	mustEmbedUnimplementedGreeterServiceServer()
}

// UnimplementedGreeterServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServiceServer struct {
}

func (UnimplementedGreeterServiceServer) Greet(context.Context, *GreetRequest) (*GreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Greet not implemented")
}
func (UnimplementedGreeterServiceServer) SearchOrders(*wrapperspb.StringValue, GreeterService_SearchOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchOrders not implemented")
}
func (UnimplementedGreeterServiceServer) UpdateOrders(GreeterService_UpdateOrdersServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateOrders not implemented")
}
func (UnimplementedGreeterServiceServer) mustEmbedUnimplementedGreeterServiceServer() {}

// UnsafeGreeterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServiceServer will
// result in compilation errors.
type UnsafeGreeterServiceServer interface {
	mustEmbedUnimplementedGreeterServiceServer()
}

func RegisterGreeterServiceServer(s grpc.ServiceRegistrar, srv GreeterServiceServer) {
	s.RegisterService(&GreeterService_ServiceDesc, srv)
}

func _GreeterService_Greet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServiceServer).Greet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GreeterService_Greet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServiceServer).Greet(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GreeterService_SearchOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GreeterServiceServer).SearchOrders(m, &greeterServiceSearchOrdersServer{stream})
}

type GreeterService_SearchOrdersServer interface {
	Send(*Order) error
	grpc.ServerStream
}

type greeterServiceSearchOrdersServer struct {
	grpc.ServerStream
}

func (x *greeterServiceSearchOrdersServer) Send(m *Order) error {
	return x.ServerStream.SendMsg(m)
}

func _GreeterService_UpdateOrders_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GreeterServiceServer).UpdateOrders(&greeterServiceUpdateOrdersServer{stream})
}

type GreeterService_UpdateOrdersServer interface {
	SendAndClose(*wrapperspb.StringValue) error
	Recv() (*Order, error)
	grpc.ServerStream
}

type greeterServiceUpdateOrdersServer struct {
	grpc.ServerStream
}

func (x *greeterServiceUpdateOrdersServer) SendAndClose(m *wrapperspb.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *greeterServiceUpdateOrdersServer) Recv() (*Order, error) {
	m := new(Order)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GreeterService_ServiceDesc is the grpc.ServiceDesc for GreeterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GreeterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.v1.GreeterService",
	HandlerType: (*GreeterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Greet",
			Handler:    _GreeterService_Greet_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SearchOrders",
			Handler:       _GreeterService_SearchOrders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "updateOrders",
			Handler:       _GreeterService_UpdateOrders_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/v1/demo.proto",
}
